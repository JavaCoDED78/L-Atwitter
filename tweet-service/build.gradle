plugins {
    id 'java'
    id 'org.springframework.boot' version '2.7.15-SNAPSHOT'
    id 'io.spring.dependency-management' version '1.1.4'
    id "io.freefair.lombok" version "8.4"
    id 'com.bmuschko.docker-spring-boot-application' version '8.1.0'
}

group 'com.gmail.javacoded78'
version '0.0.1-SNAPSHOT'

java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

apply from: "$rootProject.projectDir/versions-script.gradle"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${versions.springCloudVersion}"
    }
}

dependencies {
    implementation project(':common')
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
    implementation 'org.springframework.cloud:spring-cloud-sleuth-zipkin'
    implementation 'org.springframework.cloud:spring-cloud-starter-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-bootstrap'
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation "org.modelmapper:modelmapper:${versions.modelMapper}"
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.jsoup:jsoup:1.16.1'
    implementation 'org.json:json:20230618'
    implementation "com.github.ben-manes.caffeine:caffeine:${versions.caffeine}"

    runtimeOnly 'org.postgresql:postgresql'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.testcontainers:postgresql:${versions.testcontainers}"
}

tasks.named('test') {
    useJUnitPlatform()
}

docker {
    springBootApplication {
        baseImage = 'openjdk:17'
        maintainer = 'Andrei Soroka <javacoded78@gmail.com>'
        ports = [8002]
    }
}